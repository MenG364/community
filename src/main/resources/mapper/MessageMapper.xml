<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.meng.community.dao.MessageMapper">

    <resultMap id="BaseResultMap" type="com.meng.community.entity.Message">
            <id property="id" column="id" jdbcType="INTEGER"/>
            <result property="fromId" column="from_id" jdbcType="INTEGER"/>
            <result property="toId" column="to_id" jdbcType="INTEGER"/>
            <result property="conversationId" column="conversation_id" jdbcType="VARCHAR"/>
            <result property="content" column="content" jdbcType="VARCHAR"/>
            <result property="status" column="status" jdbcType="INTEGER"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="selectFields">
        id,from_id,to_id,
        conversation_id,content,status,
        create_time
    </sql>

    <sql id="insertFields">
        from_id,to_id,
        conversation_id,content,status,
        create_time
    </sql>
    <select id="selectConversations" resultMap="BaseResultMap">
        select <include refid="selectFields"></include>
        from message
        where id in(
            select max(id)
            from message
            where status!=2 and from_id!=1 and (#{userId}=from_id or #{userId}=to_id)
            group by conversation_id
        )
        order by id desc
        limit #{offset},#{limit}
    </select>

    <select id="selectConversationCount" resultType="int">
        select count(m.maxid) from (
               select max(id) maxid
               from message
               where status!=2 and from_id!=1 and (#{userId}=from_id or #{userId}=to_id)
               group by conversation_id
                                   ) as m
    </select>

    <select id="selectLetters" resultMap="BaseResultMap">
        select <include refid="selectFields"></include>
        from message
        where status!=2 and from_id!=1 and conversation_id=#{conversationId}
        order by id desc
        limit #{offset},#{limit}
    </select>

    <select id="selectLetterCount" resultType="int">
        select count(id)
        from message
        where status!=2 and from_id!=1 and conversation_id=#{conversationId}
    </select>

    <select id="selectLetterUnreadCount" resultType="int">
        select count(id)
        from message
        where status=0 and from_id!=1
        and to_id=#{userId}
        <if test="conversationId!=null">
            and conversation_id=#{conversationId}
        </if>

    </select>


    <insert id="insertMessage" parameterType="Message" keyProperty="id">
        insert into message(<include refid="insertFields"></include>)
        values (#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

    <update id="updateStatus">
        update message set status=#{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="selectLetterById" resultMap="BaseResultMap">
        select <include refid="selectFields"></include>
        from message
        where id=#{id}
    </select>

    <select id="selectLatestNotice" resultMap="BaseResultMap">
        select <include refid="selectFields"></include>
        from message
        where id in(
            select max(id) from message
            where status!=2
            and from_id=1
            and to_id=#{userId}
            and conversation_id=#{topic}
        )
    </select>
    <select id="selectNoticeCount" resultType="int">
        select count(id) from message
        where status!=2
            and from_id=1
            and to_id=#{userId}
            and conversation_id=#{topic}
    </select>

    <select id="selectNoticeUnreadCount" resultType="int">
        select count(id) from message
        where status=0
            and from_id=1
            and to_id=#{userId}
            <if test="topic!=null">
                and conversation_id=#{topic}
            </if>
    </select>

    <select id="selectNotices" resultMap="BaseResultMap">
        select <include refid="selectFields"></include>
        from message
        where status!=2
        and from_id=1
        and to_id=#{userId}
        and conversation_id=#{topic}
        order by create_time desc
        limit #{offset},#{limit}
    </select>
    
</mapper>
